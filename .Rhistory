library(devtools)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(raster)
?crs
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
Keene_DEM<- raster('C:/Users/atiko/Desktop/Keene/covariates/DEM.tif')
plot(Keene_DEM)
use_data(Keene_DEM)
devtools::check()
devtools::check()
load("Keene_DEM.rda")
load("./data/Keene_DEM.rda")
devtools::check()
data(keene)
data(keene)
data(keene)
devtools::check()
devtools::check()
devtools::check()
data(keene)
#'
#' @return Raster* object
#' @export
#'
#' @examples
#' #Calculate Euclidean distance fields from a DEM raster
#' data(keene)
#' oss.edf(Keene_DEM)
#'
#'
oss.edf<- function(x){
# first we set up window and plot d
graphics::par(mfrow=c(2,4), mar=c(0.2,0.2,1.5,0.2), oma=c(0.2,0.2,2,2))
graphics::plot(x, main = "Source", legend=FALSE, axes=FALSE)
# next convert the raster to a dataframe for calculating the XDIST and YDIST
d2<- methods::as(x,"SpatialPointsDataFrame")
d2<- as.data.frame(d2@coords)
d2$xdist<- x@extent@xmax - d2$x
d2$ydist<- x@extent@ymax - d2$y
# calculate the XDIST, which is the X distance from every raster cell to xmax coordinate
xgrid<- subset(d2,select=c("x","y",'xdist'))
sp::coordinates(xgrid)<- c("x","y")
sp::gridded(xgrid)<-TRUE
xgrid<- raster::raster(xgrid)
xgrid<- raster::resample(xgrid,x,method="ngb")
graphics::plot(xgrid, main='Dist XMax',legend=FALSE,axes=FALSE)
raster::projection(xgrid)<- raster::crs(x)
xgrid<- raster::mask(x = xgrid, mask = x)
raster::writeRaster(xgrid,'distx.tif',overwrite = TRUE)
rm(xgrid)
print("DISTANCE FROM XMAX COMPLETE")
# calculate the YDIST, which is the Y distance from every raster cell to ymax coordinate
ygrid<- subset(d2,select=c("x","y",'ydist'))
sp::coordinates(ygrid)<- c("x","y")
sp::gridded(ygrid)<-TRUE
ygrid<- raster::raster(ygrid)
ygrid<- raster::resample(ygrid,x,method="ngb")
graphics::plot(ygrid, main='Dist YMax',legend=FALSE,axes=FALSE)
raster::projection(ygrid) <- raster::crs(x)
ygrid<- raster::mask(x = ygrid, mask = x)
raster::writeRaster(ygrid,'disty.tif',overwrite = TRUE)
rm(ygrid)
print("DISTANCE FROM YMAX COMPLETE")
# now we need to generate vectors representing the 4 corners and the center of the raster
nw  <- c(x@extent@xmin,x@extent@ymax)
sw  <- c(x@extent@xmin,x@extent@ymin)
ne  <- c(x@extent@xmax,x@extent@ymax)
se  <- c(x@extent@xmax,x@extent@ymin)
mid<- c(round(x@extent@xmax - ((x@extent@xmax - x@extent@xmin)/2),0),round(x@extent@ymax - ((x@extent@ymax - x@extent@ymin)/2),0))
# generate distance to NW corner grid
NW<- raster::distanceFromPoints(x,nw)
NW<- raster::mask(x = NW, mask = x)
raster::projection(NW) <- raster::crs(x)
graphics::plot(NW, main='Dist NW',legend=FALSE,axes=FALSE)
raster::writeRaster(NW,"distnw.tif",overwrite = TRUE)
print('DISTANCE FROM NW COMPLETE')
# generate distance to SW corner grid
SW<- raster::distanceFromPoints(x,sw)
SW<- raster::mask(x = SW, mask = x)
raster::projection(SW) <- raster::crs(x)
graphics::plot(SW, main='Dist SW',legend=FALSE,axes=FALSE)
raster::writeRaster(SW,"distsw.tif",overwrite = TRUE)
print('DISTANCE FROM SW COMPLETE')
# generate distance to NE corner grid
NE<- raster::distanceFromPoints(x,ne)
NE<- raster::mask(x = NE, mask = x)
raster::projection(NE) <- raster::crs(x)
graphics::plot(NE, main='Dist from NE',legend=FALSE,axes=FALSE)
raster::writeRaster(NE,"distne.tif",overwrite = TRUE)
print('DISTANCE FROM NE COMPLETE')
# generate distance to SE corner grid
SE<- raster::distanceFromPoints(x,se)
SE<- raster::mask(x = SE, mask = x)
raster::projection(SE) <- raster::crs(x)
graphics::plot(SE, main='Dist SE',legend=FALSE,axes=FALSE)
raster::writeRaster(SE,"distse.tif",overwrite = TRUE)
print('DISTANCE FROM SE COMPLETE')
# generate distance to CENTRE grid
ctr<- raster::distanceFromPoints(x,mid)
ctr<- raster::mask(x = ctr, mask = x)
raster::projection(ctr) <- raster::crs(x)
graphics::plot(ctr, main='Dist MID',legend=FALSE,axes=FALSE)
raster::writeRaster(ctr,"distmid.tif",overwrite = TRUE)
print('DISTANCE FROM CENTRE COMPLETE')
}
oss.edf(Keene_DEM)
x<- Keene_DEM
# first we set up window and plot d
graphics::par(mfrow=c(2,4), mar=c(0.2,0.2,1.5,0.2), oma=c(0.2,0.2,2,2))
graphics::plot(x, main = "Source", legend=FALSE, axes=FALSE)
plot(x, main = "Source", legend=FALSE, axes=FALSE)
raster::plot(x, main = "Source", legend=FALSE, axes=FALSE)
devtools::check()
devtools::check()
devtools::check()
raster()
keene<- raster('C:/Users/atiko/Desktop/Keene/covariates/DEM/tif')
keene<- raster('C:/Users/atiko/Desktop/Keene/covariates/DEM.tif')
use_data(keene)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
setwd()
setwd("C:/Users/atiko/Desktop")
library(devtools)
install_github(repo = "newdale/onsoilsurvey")
setwd("C:/Users/atiko")
install.packages("raster")
library("devtools")
install_github(repo = "newdale/onsoilsurvey")
library(onsoilsurvey)
?onsoilsurvey
data(keene)
plot(keene)
raster::plot(keene)
oss.edf(keene)
load("C:/Users/atiko/Desktop/Keene/01_CSSS_Data/PHH20/Models/CubistOC005.Rdata")
View(CubistOC005)
t<- CubistOC005$trainingData
t
View(t)
